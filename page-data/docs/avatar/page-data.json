{"componentChunkName":"component---src-templates-doc-page-js","path":"/docs/avatar/","result":{"data":{"mdx":{"frontmatter":{"title":"Avatar","component":"Avatar","description":"Useful for presenting profile images and initials."},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Avatar\",\n  \"component\": \"Avatar\",\n  \"description\": \"Useful for presenting profile images and initials.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar PropsTable = makeShortcode(\"PropsTable\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }), \"<Avatar src={getValidImageUrl()} />\\n\")), mdx(PropsTable, {\n    data: {\n      children: {\n        type: 'ReactNode',\n        description: 'Fallback content to show if the image could not be loaded.'\n      },\n      src: {\n        type: 'string',\n        description: 'The URL of the image to use.'\n      },\n      alt: {\n        type: 'string',\n        description: 'A text description of the image.'\n      },\n      variant: {\n        type: 'light | dark',\n        description: 'The variant to use, it changes the colors and hover effect. The default value is the current theme.'\n      }\n    },\n    mdxType: \"PropsTable\"\n  }), mdx(\"h2\", {\n    \"id\": \"examples\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#examples\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }))), \"Examples\"), mdx(\"h3\", {\n    \"id\": \"avatar-using-non-existing-image-with-fallback-to-initials\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#avatar-using-non-existing-image-with-fallback-to-initials\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }))), \"Avatar using non-existing image with fallback to initials\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }), \"<Avatar src=\\\"\\\">KS</Avatar>\\n\")), mdx(\"h3\", {\n    \"id\": \"avatar-using-non-existing-image-with-fallback-to-custom-initials\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#avatar-using-non-existing-image-with-fallback-to-custom-initials\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }))), \"Avatar using non-existing image with fallback to custom initials\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }), \"<Avatar src=\\\"\\\">\\n  <Text sx={{ color: 'white' }} marginBottom={1}>\\n    K\\n  </Text>\\n  <Text sx={{ color: 'white' }} marginTop={1}>\\n    S\\n  </Text>\\n</Avatar>\\n\")), mdx(\"h3\", {\n    \"id\": \"avatar-using-existing-image-on-an-alternative-variant\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#avatar-using-existing-image-on-an-alternative-variant\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }))), \"Avatar using existing image on an alternative variant\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"live removeFragment\",\n    \"live\": true,\n    \"removeFragment\": true\n  }), \"function AlternativeVariant() {\\n  const darkMode = useDarkMode()\\n  const isDarkMode = darkMode.value\\n\\n  return (\\n    <Box sx={{ bg: 'dark' }} p={2}>\\n      <Avatar src={getValidImageUrl()} sx={{ bg: 'purple' }} variant={isDarkMode ? 'light' : 'dark'}>\\n        KS\\n      </Avatar>\\n    </Box>\\n  )\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"avatar-using-non-existing-image-with-fallback-to-initials-on-an-alternative-variant\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#avatar-using-non-existing-image-with-fallback-to-initials-on-an-alternative-variant\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }))), \"Avatar using non-existing image with fallback to initials on an alternative variant\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"live removeFragment\",\n    \"live\": true,\n    \"removeFragment\": true\n  }), \"function AnotherAlternativeVariant() {\\n  const darkMode = useDarkMode()\\n  const isDarkMode = darkMode.value\\n\\n  return (\\n    <Box sx={{ bg: 'dark' }} p={2}>\\n      <Avatar src=\\\"\\\" variant={isDarkMode ? 'light' : 'dark'}>\\n        KS\\n      </Avatar>\\n    </Box>\\n  )\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/docs/avatar/"}}}