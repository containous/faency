{"componentChunkName":"component---src-templates-doc-page-js","path":"/docs/menu/","result":{"data":{"mdx":{"frontmatter":{"title":"Menu","component":"Menu","description":"Useful for displaying a list of actions. Typically not used directly but in conjunction with other components like RightClickMenu or DropdownMenu."},"body":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Menu\",\n  \"component\": \"Menu\",\n  \"description\": \"Useful for displaying a list of actions. Typically not used directly but in conjunction with other components like RightClickMenu or DropdownMenu.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar PropsTable = makeShortcode(\"PropsTable\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var _ref2;\n\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"live removeFragment\",\n    \"live\": true,\n    \"removeFragment\": true\n  }), \"<DropdownMenu\\n  button={<Button variant=\\\"primary\\\">Open Menu</Button>}\\n  menu={\\n    <Menu onItemSelected={item => alert(item.label)}>\\n      <MenuItem label=\\\"Option 1\\\" />\\n      <MenuItem label=\\\"Option 2\\\" />\\n      <MenuItem label=\\\"Option 3\\\" />\\n    </Menu>\\n  }\\n/>\\n\")), mdx(PropsTable, {\n    data: (_ref2 = {\n      children: {\n        type: \"MenuItem*\",\n        description: 'The options to display. *Accepted values are MenuItem and other components exported along with Menu'\n      },\n      buttonRef: {\n        type: 'React.RefObject',\n        description: 'A reference to a button element used to position the menu below'\n      }\n    }, _defineProperty(_ref2, \"buttonRef\", {\n      type: 'React.RefObject',\n      description: 'A reference to the text element inside of a button, used as extra positioning information when the menu is used to build a Select'\n    }), _defineProperty(_ref2, \"anchorPoint\", {\n      type: 'Point (x, y)',\n      description: 'An alternative way to position the menu directly by referencing a point in space, used when opening a menu via right click'\n    }), _defineProperty(_ref2, \"isOpen\", {\n      type: 'Boolean',\n      \"default\": 'false',\n      description: 'Whether it is open or not'\n    }), _defineProperty(_ref2, \"onDismiss\", {\n      type: 'Function',\n      description: 'A function to be called when it is dismissed'\n    }), _defineProperty(_ref2, \"highlightedIndex\", {\n      type: 'Number',\n      description: 'The index of the highlighted item (if controlled)'\n    }), _defineProperty(_ref2, \"defaultHighlightedIndex\", {\n      type: 'Number',\n      description: 'A function called when the highlighted item changes'\n    }), _defineProperty(_ref2, \"onHighlightedIndexChange\", {\n      type: '(index?: number) => void\t',\n      description: 'The index of the item to highlithed by default (if uncontrolled)'\n    }), _defineProperty(_ref2, \"onItemSelected\", {\n      type: '(item: Item) => void',\n      description: 'The index of the item to highlithed by default (if uncontrolled)'\n    }), _defineProperty(_ref2, \"calculateMenuPosition\", {\n      type: '(options: Options) => MenuPosition | undefined',\n      description: 'A function used to specify how to calculate the menu position'\n    }), _defineProperty(_ref2, \"unstable__disableLock\", {\n      type: 'boolean',\n      description: 'Used to stop locking the clickable area inside the menu container.'\n    }), _ref2),\n    mdxType: \"PropsTable\"\n  }), mdx(\"h2\", {\n    \"id\": \"examples\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#examples\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }))), \"Examples\"), mdx(\"p\", null, \"The following examples use the Dropdown component as a helper to display different use cases.\"), mdx(\"h3\", {\n    \"id\": \"menuitemcheckbox\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#menuitemcheckbox\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }))), \"MenuItemCheckbox\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"live removeFragment\",\n    \"live\": true,\n    \"removeFragment\": true\n  }), \"function CheckboxExample() {\\n  const [option1, setOption1] = React.useState(true)\\n  const [option2, setOption2] = React.useState(false)\\n  const [option3, setOption3] = React.useState(true)\\n\\n  return (\\n    <DropdownMenu\\n      button={<Button variant=\\\"primary\\\">Open Menu</Button>}\\n      menu={\\n        <Menu>\\n          <MenuItemCheckbox label=\\\"Option 1\\\" checked={option1} onChange={setOption1} />\\n          <MenuItemCheckbox label=\\\"Option 2\\\" checked={option2} onChange={setOption2} />\\n          <MenuItemCheckbox label=\\\"Option 3\\\" checked={option3} onChange={setOption3} />\\n        </Menu>\\n      }\\n    />\\n  )\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"menuitemradiogroup-and-menuitemradio\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#menuitemradiogroup-and-menuitemradio\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }))), \"MenuItemRadioGroup and MenuItemRadio\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"live removeFragment\",\n    \"live\": true,\n    \"removeFragment\": true\n  }), \"function CheckboxExample() {\\n  const [value, setValue] = React.useState('2')\\n\\n  return (\\n    <DropdownMenu\\n      button={<Button variant=\\\"primary\\\">Open Menu</Button>}\\n      menu={\\n        <Menu>\\n          <MenuItemRadioGroup value={value} onChange={setValue}>\\n            <MenuItemRadio value=\\\"1\\\" label=\\\"Radio item one\\\" />\\n            <MenuItemRadio value=\\\"2\\\" label=\\\"Radio item two\\\" />\\n            <MenuItemRadio value=\\\"3\\\" label=\\\"Radio item three\\\" />\\n          </MenuItemRadioGroup>\\n        </Menu>\\n      }\\n    />\\n  )\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"menuitemseparator-and-menuitemlabel\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#menuitemseparator-and-menuitemlabel\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }))), \"MenuItemSeparator and MenuItemLabel\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }), \"<DropdownMenu\\n  button={<Button variant=\\\"primary\\\">Open Menu</Button>}\\n  menu={\\n    <Menu>\\n      <MenuItem label=\\\"Option 1\\\" />\\n      <MenuItemSeparator />\\n      <MenuItemLabel>Section label</MenuItemLabel>\\n      <MenuItem label=\\\"Option 2\\\" />\\n      <MenuItem label=\\\"Option 3\\\" />\\n    </Menu>\\n  }\\n/>\\n\")), mdx(\"h3\", {\n    \"id\": \"preselected-option\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#preselected-option\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }))), \"Preselected option\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }), \"<DropdownMenu\\n  button={<Button variant=\\\"primary\\\">Open Menu</Button>}\\n  menu={\\n    <Menu defaultHighlightedIndex={1} onItemSelected={item => alert(item.label)}>\\n      <MenuItem label=\\\"Option 1\\\" />\\n      <MenuItem label=\\\"Option 2\\\" />\\n      <MenuItem label=\\\"Option 3\\\" />\\n    </Menu>\\n  }\\n/>\\n\")), mdx(\"h3\", {\n    \"id\": \"onitemselected-callback\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#onitemselected-callback\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }))), \"OnItemSelected callback\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }), \"<DropdownMenu\\n  button={<Button variant=\\\"primary\\\">Open Menu</Button>}\\n  menu={\\n    <Menu onItemSelected={item => alert(item.label)}>\\n      <MenuItem label=\\\"Option 1\\\" />\\n      <MenuItem label=\\\"Option 2\\\" />\\n      <MenuItem label=\\\"Option 3\\\" />\\n    </Menu>\\n  }\\n/>\\n\")), mdx(\"h3\", {\n    \"id\": \"ondismiss-callback\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#ondismiss-callback\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }))), \"OnDismiss callback\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }), \"<DropdownMenu\\n  button={<Button variant=\\\"primary\\\">Open Menu</Button>}\\n  menu={\\n    <Menu onDismiss={() => alert('Menu closed')}>\\n      <MenuItem label=\\\"Option 1\\\" />\\n      <MenuItem label=\\\"Option 2\\\" />\\n      <MenuItem label=\\\"Option 3\\\" />\\n    </Menu>\\n  }\\n/>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/docs/menu/"}}}